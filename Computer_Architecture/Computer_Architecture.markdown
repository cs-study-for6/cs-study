# 컴퓨터의 구성
    컴퓨터는 CPU, DMA 컨트롤러, 메모리, 타이머, 디바이스 컨트롤러 등으로 이루어져 있다.
## 하드웨어

- 컴퓨터를 구성하는 기계적 장치
    - CPU(Central Processign Unit) :  인터럽트에 의해 단순히 메모리에 존재하는 명령어를 해석해서 실행하는 일꾼이다. 산술논리연산장치, 제어장치, 레지스터로 구성 되어있다   .
        - 제어장치(CU. Control Unit) : 프로세스 조작을 지시하는 CPU 부품.
            
             입출력장치 간 통신을 제어하고 명령어들을 읽고 해석하며 데이터 처리를 위한 순서를 결정한다.


        - 레지스터 : CPU 내부에 있는 매우 빠른 임시기억장치. 
            
            CPU와 직접 연결되어 있으므로 연산속도가 메모리보다 수십 ~ 수백 배까지 빠르다. CPU는 자체적으로 데이터를 저장할 수 없으므로 데이터를 레지스터를 거쳐져 전달한다.

        - 산술논리연산장치(ALU, Arithmetic Logic Unit) : 덧셈, 뺄셈 같은 두 숫자의 산술 연산과 배타적 논리합, 논리곱 같은 논리 연산을 계산하는 디지털 회로.
        #
        ### CPU의 연산처리 과정
        1. 제어장치가 메모리에 계산할 값을 로드, 또한 레지스터에도 로드
        2. 제어장치가 레지스터에 있는 값을 계산하라고 산술논리연산장치에 명령
        3. 제어장치가 계산된 값을 다시 '레지스터에서 메모리로' 계산한 값을 저장  
        #

    - 인터럽트 : 어떤 신호가 들어왔을때 CPU를 잠깐 정지시키는 것
        
         키보드, 마우스 등 IO 다바이스로 인한 인터럽트, 0으로 숫자를 나누는 산술 연산에서의 인터럽트, 프로세스 오류 등으로 발생. 
            인터럽트가 발생되면 인터럽트 핸들러 함수가 모여 있는 인터럽트 벡터로 가서 인터럽트 핸들러 함수가 실행. 인터럽트 간에는 우선순위가 있고 우선순위에 따라 실행되며 소프트웨어 인터럽트, 하드웨어 인터럽트로 나뉜다.
         - 인터럽트 핸들러 함수
            - 인터럽트가 발생했을 때 이를 핸들링하기 위한 함수. 커널 내부의 IRQ를 통해 호출되며 request_ir1()를 통해 인터럽트 핸들러 함수를 등록 할 수 있다.



        - 소프트웨어 인터럽트 : 소프트웨어 인터럽트는 트랩(trap)이라고도 한다. 프로세스 오류등으로 프레세스가 시스템콜을 호출할 때 발동
        - 하드웨어 인터럽트 : 하드웨어 인터럽트는 키보드를 연결한다거나 마우스를 연결하는 일 등의 IO 디바이스에서 발생하는 인터럽트이다.
          
            이때 인터럽트 라인이 설계된 이후 순찾거인 인터럽트 실행을 중지하고 운영체제에 시스템콜을 요청해서 원하는 디바이스로 향해 디바이스에 있는 작은 로컬 버퍼에 접근하여 일을 수행한다.    
    # 
    - DMA 컨트롤러 : I/O 디바이스가 메모리에 직접 접근할 수 잇도록 하는 하드웨어 장치

        CPU에만 너무 많은 인터럽트 요청이 들어오기 때문에 CPU 부하를 막아주며 CPU의 일을 부담하는 보조 일꾼. 또한 하나의 작업을 CPU와 DMA 컨트롤러가 동시에하는 것을 방지 한다.
    #

    - 메모리 : 전자회로에서 데이터나 상태, 명령어 등을 기록하는 장치

        보통 RAM(Random Access Memory)을 일컬어 메모리라고도 한다. CPU는 계산을 담당하고 메모리는 기억을 담당한다.
        
        공장에 비유하자면 CPU는 일꾼, 메모리는 작업장이다. 따라서 메모릭 클수록 많은 일을 동시에 수행할 수 있다.
    #

    - 타이머 : 몇 초 안에는 작업이 끝나야 한다는 것을 정하고 특정 프로그렘이 시간 제한을 하는 역할을 수행한다. 시간이 많이 걸리는 프로그램이 작동할 때 제한을 걸기 위해 존재한다.
    #

    - 디바이스 컨트롤러 : 컴퓨터와 연결되어 있는 IO 디바이스들의 작은 CPU를 말한다.
        옆에 붙어 있는 로컬 버퍼는 각 디바이스에서 데이터를 임시로 저장하기 위한 작은 메모리를 뜻한다.
    #


## 소프트웨어 
- 시스템 소프트웨어 : 운영체제, 컴파일러
- 응용 소프트웨어 : 위드프로세서, 스프레드시트

---  
## 질문 답변

### 시스템 버스 관련해서도 궁금합니다.
    데이터들을 연결해주는 역할, 즉 데이터의 교통수 단 이라고 생각하면 편하다
	CPU, I/O장치, 기억 장치들을 연결해 주는 중심 통로로써 하드웨어를 물리적으로 연결하여 서로 데이터를 주고 받을 수 있게한다.

 ### DMA 컨트롤러가 CPU 부하를 어떻게 막아주는 것인지 구체적으로 설명 부탁드립니다.
     DMA 컨트롤러가 입출력 장치에서 데이터를 읽은 후 메로리로 전송하고 전송 완료 신호를 cpu에 송신하는 식으로 진행한다.

### 타이머는 제한을 어떻게 거는 건가요?
    한 프로그렘이 CPU를 독점하는 것을 막기위해 타이머를 사용하여 시간 제한을 둔다.
	이때 CPU 제어권은 운영체제 -> A프로그램 -> 운영체제 -> B프로그램-> 운영체제->... 형태로 넘어가게 된다
    운영체제는 cpu를 가지고 있다가 사용자 프로그램에 cpu를 넘겨줄 때 타이머를 같이 달아 전달하며 시간이 다 되면 interrupt를 발생시킨다
    만약 메모리에서 instruction을 돌다가 프로그램이 수행을 마치고 종료가 되면, CPU를 자동으로 반납하게 되고 interrupt가 일어나지 않기 때문에 운영체제는 CPU를 사용할 일이 없게 된다 

### 레지스터는 단순이 CPU와 직접 연결되어있어 메모리보다 계산 속도가 몇십 배나 빠른 건가요? 아니면 물리적인 부분 이외에도 차이가 있어서 빠른 건가요?
    정확히는 cpu의 속도가 ram에 의해 저하되는 것을 방지하기위해 레지스터를 사용합니다. 이는 cpu는 물리적으로 내부 회로만을 사용하고 RAm은 외부회로를 사용하여 속도차이가 발생하기 때문입니다.

### 소프트웨어 종류별로 간단한 설명 부탁드립니다
    하드웨어를 작동시키기위한 시스템 소프트웨어, 특정작업을 수행하기 위한 응용 소프트웨어로 나뉩니다.
	시스템 소프트웨어의 핵심적인 부분은 운영체제와 펌웨어 입니다.

	운영체제는 하드웨어와 응용 소프트웨어의 작동을 관리하는 프로그렘으로 윈도우, IOS 등이 해당합니다
	
	펌웨어는 컴퓨터의 시작에 필요한 시스템 소프트웨어로 시스템의 초기 작동을 제어하는 역할을 합니다, bios가 이에 해당합니다.
	컴퓨터 전원을 켜면 컴퓨터는 시스템 내부의 하드웨어를 점검하고, 운영체제가 원활히 작동되도록 컴퓨터를 초기화합니다.
	이때 수행하는 일련의 과정들이 ROM 메모리에 기록되어있어 시스템을 켤때 컴퓨터는 ROM메모리로 부터 시작 프로그램을 읽게 됩니다
	이처럼 컴퓨터를 작동시키기 위해 시작되는 소프트웨어를 펌웨어라고 합니다.
	
	펌웨어는 하드웨어를 초기화하여 사용할 수 있도록 만들고 운영체제를 하드 디스크같은 보조 기억장치로부터 주 기억장치인 RAM으로 가져와 CPU가 운영체제를 실행할 수 있도록 준비합니다
	이러한 과정 끝에 시스템 초기화면이 나타나게 됩니다.
	

	응용소프트웨어는 사용자가 사용하는 프로그램으로 운영체제 위에서 작동합니다.
